package ironcoin;

/*****  Ledger Messages  *****/

message HashedBlock {
    optional bytes hash = 1;
    optional SignedBlock signed_block = 2;
}

message SignedBlock {
    optional bytes signature = 1;
    optional Block block = 2;
}

message Block {
    optional bytes staker_pk = 1;
    optional bytes previous = 2;
    optional int64 timestamp = 3;
    optional uint32 height = 4;
    optional bytes target_hash = 5;

    repeated Transaction transactions = 6;
}

message Commitment {
    enum Type {
        INVALID = 0;
        TRANSFER = 1;
    }
    optional Type tx_type = 1;
    optional bytes bounty_pk = 2;
    optional uint64 bounty = 3;
    repeated Transfer transfers = 4;
}

message DetachedSignature {
    optional bytes public_key = 1;
    optional bytes payload = 2;
}

message Transaction {
    repeated DetachedSignature signatures = 1;
    optional Commitment commit = 2;
}

message Transfer {
    optional uint32 op_index = 1;
    optional uint64 tokens = 2;
    optional bytes source_pk = 3;
    optional bytes destination_pk = 4;
}

/*****  Messages for summarising the effect of a block  *****/

message Balance {
    optional uint64 tokens = 2;
    optional uint32 op_index = 3;
}

message BalancePatch {
    optional bytes public_key = 1;
    optional Balance before = 2;
    optional Balance after = 3;
}

message BlockWithDiff {
    optional HashedBlock hashed_block = 1;
    repeated BalancePatch diff = 2;
}

/*****  Wallet Messages  *****/

message Wallet {
    repeated WalletKeypair keypairs = 1;
}

message WalletKeypair {
    optional bytes public_key = 1;
    optional bytes secret_key = 2;
    optional string name = 3;
}

/*****  RPC Messages  *****/

message RpcRequest {
    enum Method {
        INVALID = 0;
        GET_BLOCKS = 1;
        GET_BLOCKTREE = 2;
        PUB_BLOCK = 3;
        PUB_TRANSACTION = 4;
    }
    optional Method method = 1;

    optional GetBlocksRequest get_blocks = 2;
    optional GetBlocktreeRequest get_blocktree = 3;
    optional PubBlockRequest pub_block = 4;
    optional PubTransactionRequest pub_transaction = 5;
}

message SignedRpcRequest {
    optional bytes signature = 1;
    optional RpcRequest request = 2;
}

message RpcResponse {
    enum Status {
        INVALID = 0;
        OK = 1;
        INVALID_MESSAGE = 2;
        INVALID_METHOD = 3;
        REQUEST_LIMIT_REACHED = 4;
        INTERNAL_ERROR = 5;
    }
    optional Status status = 1;
    optional string description = 2;

    optional SignedRpcRequest original_request = 3;

    optional GetBlocksResponse get_blocks = 4;
    optional GetBlocktreeResponse get_blocktree = 5;
    optional PubBlockResponse pub_block = 6;
    optional PubTransactionResponse pub_transaction = 7;
}

message GetBlocksRequest {
    repeated bytes blocks = 1;
}

message GetBlocksResponse {
    enum Status {
        INVALID = 0;
        OK = 1;
        INVALID_HASH = 2;
        UNKNOWN_BLOCK = 3;
    }
    optional Status status = 1;
    optional string description = 2;

    repeated HashedBlock blocks = 3;
}

message GetBlocktreeRequest {
    optional uint32 start_height = 1;
}

message GetBlocktreeResponse {
    enum Status {
        INVALID = 0;
        OK = 1;
        INVALID_REQUEST = 2;
    }
    optional Status status = 1;
    optional string description = 2;

    optional bytes head = 3;
    optional uint32 head_height = 4;
    optional uint32 start_height = 5;
    repeated bytes ancestors = 6;
}

message PubBlockRequest {
    optional HashedBlock block = 1;
}

message PubBlockResponse {
    enum Status {
        INVALID = 0;
        OK = 1;
        INVALID_REQUEST = 2;
        INVALID_BLOCK = 3;
    }
    optional Status status = 1;
    optional string description = 2;
}

message PubTransactionRequest {
    optional Transaction transaction = 1;
}

message PubTransactionResponse {
    enum Status {
        INVALID = 0;
        OK = 1;
        INVALID_REQUEST = 2;
    }
    optional Status status = 1;
    optional string description = 2;
}
